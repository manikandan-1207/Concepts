Maven is source code build tool 

Maven is a software project management aand comperhension tool. 
Based on the POM (project object model) maven manage the project build , reporting and documenting from the file.

Maven archetype 
maven-archetype-quickstart -> used for basic default project structure

Maven coordinates
group id + archetype id + version      package name 

Maven project structure
project name
	pom.xml
	src

application source code + dependencies,libraries ->compile ->run test case ->create package  = build(jar/war/ear)   -->(deploy) Complete application

Maven works based on POM.xml file
----------
What are the steps are involved in the build the appliaction

Step 1 : Compile the source code
		app.java ->  app.class
		apptest.java -> apptest.class
step 2: Run the test cases

Step 3: packaging  (jar/war/ear)

Step 4: deploying the application by using the maven
------------
Maven goals are must the  build the application using maven

The maven build works based on these three built-in life cycle

	clean
	default
	site

Inside these three there is various goals
Important and comman goals used in maven are

clean    	 remove the all files generated by the previous build
validate 	 Validate the project is correct and all necessary information is available
Compile	 	 Compile the source code of the project
test-compile 		 Compile the test source code into the test destination directory
test		 Run the test case using the sutiable unit testing framework
package 	 Take a compiled code and package its in the distributed format such as jar or war
verify 		 run any check to verify the package is meet all the quality criteria
install 	 Install the package into the local repository
deploy 		 Copy the final package to the remote repository for sharing with the other project. 


The overall process is called build

install goal 

its create the package and store the dependicies(junit) into local repository( /usr/manikandan/.m2/com)

-------------
How to set up the maven in linux

step1: cd /opt  
	wget  https://dlcdn.apache.org/maven/maven-3/3.9.5/binaries/apache-maven-3.9.5-bin.tar.gz
Extract the archive file using unzip or tar
	tar -xvzf apache-maven-3.9.5-bin.tar.gz   (extract the tar file)

step 2: (NOTE: if we set up the env under /root/bash_profile only access the mvn by root user ---- /root/bashrc for all the user  )
Need the set up the environmental variable for maven otherwise it only work on inside the maven bin directory
If need to run the maven from anywhere then  Need the set up the environmental variable
For set up the environment variable in linux 
vi ./bash_profile

In the $PATH we define the env variable.

----------------
To build the maven project in linux

1.Pull the src code and pom file to the linux machine repository
2. execute the maven goal for build the project includes in builtin clean or default or site
3.mvn cmd   ->  execute the maven cmd only where the pom.xml is placed. other wise it won't work.
4. mvn clean   
	 mvn compile  - it create the target dir and inside it create the  generated source and classess file 
	 mvn test-compile - it create the generated-test-sources and test -classes inside the target dir
	 mvn test    - it run the test cases and stored it as surefire-reports in target dir
	 mvn package  - it create a package under target dir
	 mvn install  - it install  the created packages in the local directory (/root/.m2/com)

-------------------------------------------
To create the new maven project in linux cmd line
1. navigate to the a directory where the project want to create
2. run the cmd --   mvn  archetype:generate  (it show the all the maven archetype)
3.  select the one which you want by using the number of archetype (for webapp choose maven-archetype-webapp)
4. mvn archetype:generate | grep maven-archetype-webapp  (to find the web app archetype)
5. enter the archetype number then provide the 
	version of maven-archetype-webapp : 7
	group id:democompany 
	archetypeid:second-demoproject
	version:(default)   
	Package:(default)   
        then ask for verfify and confirm by using Y

((((or we can use this to skip  until the version))))
 
mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-webapp -DarchetypeVersion=1.4

------------------------------
Deploy the webapp in tomcat using the maven

1. Update the pom.xml file plugin managenent -> add the target server details

<plugin>
          <groupId>org.apache.tomcat.maven</groupId>
          <artifactId>tomcat7-maven-plugin</artifactId>
          <version>2.2</version>
        <configuration>
               	<url>http://54.208.181.115:8080/manager/text</url>
       	 	 <server>tomcatserver</server>
        	<path>/second-demo-project</path>
        </configuration>
</plugin>

2.create  & Update the /root/.m2/setting.xml file -> add the tomcat credentials in settings.xml

<?xml version="1.0" encoding="UTF-8"?>
<settings>
        <servers>
                <server>
                        <id>tomcatserver</id>
                        <username>admin</username>
                        <password>admin</password>
                </server>
        </servers>
</settings>

3.mvn  tomcat7:deploy

((((((Note: If deploy the application again with the new features but it won't deployed the new features
 because maven can't overright the project if it alredy present in tomcat.
For overcome this we need to remove the the project manually in tomcat  
and again doe the deployment in maven using --- mvn tomcat7:deploy------- ))))


